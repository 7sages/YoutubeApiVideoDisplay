{"version":3,"sources":["components/Searchbar.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","props","onInputChange","event","setState","inputvalue","target","value","state","onFormSubmit","bind","preventDefault","this","className","onSubmit","type","onChange","Component","VideoItem","video","onVideoSelect","onClick","alt","id","videoId","src","snippet","thumbnails","medium","url","title","VideoList","videos","renderdList","map","key","VideoDetail","videoSrc","allowFullScreen","description","App","selectedVideo","onSearchSubmit","a","axios","get","params","part","maxResult","q","response","data","items","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uVAEqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,cAAgB,SAAAC,GACd,EAAKC,SAAS,CACZC,WAAYF,EAAMG,OAAOC,SAP3B,EAAKC,MAAQ,CACXH,WAAY,IAEd,EAAKI,aAAe,EAAKA,aAAaC,KAAlB,gBANH,E,0EAaNP,GACXA,EAAMQ,iBACNC,KAAKX,MAAMQ,aAAaG,KAAKJ,MAAMH,c,+BAGnC,OACE,yBAAKQ,UAAU,wBACb,0BAAMC,SAAUF,KAAKH,aAAcI,UAAU,WAC3C,yBAAKA,UAAU,SACb,2BAAOA,UAAU,sBAAjB,qBACA,2BACEE,KAAK,OACLC,SAAUJ,KAAKV,cACfK,MAAOK,KAAKJ,MAAMH,oB,GA3BOY,a,MCAxB,SAASC,EAAT,GAA8C,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,cACzC,OACE,yBAAKC,QAAS,kBAAMD,EAAcD,IAAQN,UAAU,mBAClD,yBACES,IAAKH,EAAMI,GAAGC,QACdX,UAAU,WACVY,IAAKN,EAAMO,QAAQC,WAAWC,OAAOC,MAEvC,yBAAKhB,UAAU,WACb,yBAAKA,UAAU,UAAUM,EAAMO,QAAQI,SCRhC,SAASC,EAAT,GAA+C,IAA1BC,EAAyB,EAAzBA,OAAQZ,EAAiB,EAAjBA,cACpCa,EAAcD,EAAOE,KAAI,SAAAf,GAC7B,OACE,kBAAC,EAAD,CACEgB,IAAKhB,EAAMI,GAAGC,QACdJ,cAAeA,EACfD,MAAOA,OAIb,OAAO,yBAAKN,UAAU,2BAA2BoB,GCXpC,SAASG,EAAT,GAAiC,IAAVjB,EAAS,EAATA,MACpC,IAAKA,EACH,OAAO,2CAET,IAAMkB,EAAQ,wCAAoClB,EAAMI,GAAGC,SAC3D,OACE,6BACE,yBAAKX,UAAU,YACb,4BACEyB,gBAAgB,kBAChBR,MAAM,eACNL,IAAKY,KAGT,yBAAKxB,UAAU,cACb,wBAAIA,UAAU,aAAaM,EAAMO,QAAQI,OACzC,2BAAIX,EAAMO,QAAQa,e,ICmDXC,E,YA1Db,WAAYvC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRmB,cAAgB,SAAAD,GACd,EAAKf,SAAS,CACZqC,cAAetB,KAXA,EAmBnBuB,eAnBmB,uCAmBF,WAAMrC,GAAN,eAAAsC,EAAA,sEACQC,IAAMC,IAC3B,+CACA,CACEC,OAAQ,CACNC,KAAM,UACNC,UAAW,IACXb,IAAK,0CACLc,EAAG5C,KARM,OACT6C,EADS,OAYf,EAAK9C,SAAS,CACZ4B,OAAQkB,EAASC,KAAKC,MACtBX,cAAeS,EAASC,KAAKC,MAAM,KAdtB,2CAnBE,sDAGjB,EAAK5C,MAAQ,CACXwB,OAAQ,GACRS,cAAe,MALA,E,iFAgBjB7B,KAAK8B,eAAe,iB,+BAqBpB,OACE,yBAAK7B,UAAU,gBACb,kBAAC,EAAD,CAAWJ,aAAcG,KAAK8B,iBAC9B,yBAAK7B,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBACb,kBAACuB,EAAD,CAAajB,MAAOP,KAAKJ,MAAMiC,iBAEjC,yBAAK5B,UAAU,oBACb,kBAACkB,EAAD,CACEX,cAAeR,KAAKQ,cACpBY,OAAQpB,KAAKJ,MAAMwB,iB,GAjDjBqB,IAAMpC,WCEJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1fac3aca.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Searchbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      inputvalue: \"\"\r\n    };\r\n    this.onFormSubmit = this.onFormSubmit.bind(this);\r\n  }\r\n  onInputChange = event => {\r\n    this.setState({\r\n      inputvalue: event.target.value\r\n    });\r\n  };\r\n  onFormSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.onFormSubmit(this.state.inputvalue);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"searchbar ui segment\">\r\n        <form onSubmit={this.onFormSubmit} className=\"ui form\">\r\n          <div className=\"field\">\r\n            <label className=\"ui large red label\">Youtube Searchbar</label>\r\n            <input\r\n              type=\"text\"\r\n              onChange={this.onInputChange}\r\n              value={this.state.inputvalue}\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./VideoItem.css\";\r\nexport default function VideoItem({ video, onVideoSelect }) {\r\n  return (\r\n    <div onClick={() => onVideoSelect(video)} className=\"video-item item\">\r\n      <img\r\n        alt={video.id.videoId}\r\n        className=\"ui image\"\r\n        src={video.snippet.thumbnails.medium.url}\r\n      />\r\n      <div className=\"content\">\r\n        <div className=\"header\">{video.snippet.title}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport VideoItem from \"./VideoItem\";\r\n\r\nexport default function VideoList({ videos, onVideoSelect }) {\r\n  const renderdList = videos.map(video => {\r\n    return (\r\n      <VideoItem\r\n        key={video.id.videoId}\r\n        onVideoSelect={onVideoSelect}\r\n        video={video}\r\n      />\r\n    );\r\n  });\r\n  return <div className=\"ui relaxed divided list\">{renderdList}</div>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function VideoDetail({ video }) {\r\n  if (!video) {\r\n    return <div>loading...</div>;\r\n  }\r\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\r\n  return (\r\n    <div>\r\n      <div className=\"ui embed\">\r\n        <iframe\r\n          allowFullScreen=\"allowFullScreen\"\r\n          title=\"video player\"\r\n          src={videoSrc}\r\n        ></iframe>\r\n      </div>\r\n      <div className=\"ui segment\">\r\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\r\n        <p>{video.snippet.description}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","//import logo from './logo.svg';\nimport \"./App.css\";\n\nimport React from \"react\";\n//import Youtube from \"./apis/Youtube\";\nimport axios from \"axios\";\nimport Searchbar from \"./components/Searchbar\";\nimport VideoList from \"./components/VideoList\";\nimport VideoDetail from \"./components/VideoDetail\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      videos: [],\n      selectedVideo: null\n    };\n  }\n\n  onVideoSelect = video => {\n    this.setState({\n      selectedVideo: video\n    });\n  };\n\n  componentDidMount() {\n    this.onSearchSubmit(\"learn react\");\n  }\n\n  onSearchSubmit = async inputvalue => {\n    const response = await axios.get(\n      \"https://www.googleapis.com/youtube/v3/search\",\n      {\n        params: {\n          part: \"snippet\",\n          maxResult: \"5\",\n          key: \"AIzaSyA9EihIqwP-agFalPSpJpRXhUW2zZI29FA\",\n          q: inputvalue\n        }\n      }\n    );\n    this.setState({\n      videos: response.data.items,\n      selectedVideo: response.data.items[0]\n    });\n  };\n  render() {\n    return (\n      <div className=\"ui container\">\n        <Searchbar onFormSubmit={this.onSearchSubmit} />\n        <div className=\"ui grid\">\n          <div className=\"ui row\">\n            <div className=\"eleven wide column\">\n              <VideoDetail video={this.state.selectedVideo} />\n            </div>\n            <div className=\"five wide column\">\n              <VideoList\n                onVideoSelect={this.onVideoSelect}\n                videos={this.state.videos}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}